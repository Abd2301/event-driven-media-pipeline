{
 "Resources": {
  "MediaProcessingAlarms02E7EA9C": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "TopicName": "dev-media-processing-alarms"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingAlarms/Resource"
   }
  },
  "OriginalMediaBucket322A29F3": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "dev-original-media-043309357886",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "PUT",
        "POST",
        "DELETE"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 90,
       "Status": "Enabled"
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ],
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/OriginalMediaBucket/Resource"
   }
  },
  "OriginalMediaBucketPolicy14811C2A": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "OriginalMediaBucket322A29F3"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "OriginalMediaBucket322A29F3",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OriginalMediaBucket322A29F3",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/OriginalMediaBucket/Policy/Resource"
   }
  },
  "OriginalMediaBucketAutoDeleteObjectsCustomResourceDF558BCF": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "OriginalMediaBucket322A29F3"
    }
   },
   "DependsOn": [
    "OriginalMediaBucketPolicy14811C2A"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/OriginalMediaBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "OriginalMediaBucketNotificationsF7E6D171": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "OriginalMediaBucket322A29F3"
    },
    "NotificationConfiguration": {
     "QueueConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "QueueArn": {
        "Fn::GetAtt": [
         "MediaProcessingQueue56039BA9",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "MediaProcessingQueuePolicy2D0F0068",
    "MediaProcessingQueue56039BA9",
    "OriginalMediaBucketPolicy14811C2A"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/OriginalMediaBucket/Notifications/Resource"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-043309357886-us-east-1",
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs22.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "OriginalMediaBucket322A29F3"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "ProcessedMediaBucket446D3976": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "dev-processed-media-043309357886",
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/ProcessedMediaBucket/Resource"
   }
  },
  "ProcessedMediaBucketPolicyC0D174F9": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "ProcessedMediaBucket446D3976"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessedMediaBucket446D3976",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessedMediaBucket446D3976",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/ProcessedMediaBucket/Policy/Resource"
   }
  },
  "ProcessedMediaBucketAutoDeleteObjectsCustomResourceCFB57D7D": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "ProcessedMediaBucket446D3976"
    }
   },
   "DependsOn": [
    "ProcessedMediaBucketPolicyC0D174F9"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/ProcessedMediaBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "MediaProcessingDLQ38BEDAF3": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 1209600,
    "QueueName": "dev-media-processing-dlq"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingDLQ/Resource"
   }
  },
  "MediaProcessingQueue56039BA9": {
   "Type": "AWS::SQS::Queue",
   "Properties": {
    "MessageRetentionPeriod": 1209600,
    "QueueName": "dev-media-processing-queue",
    "RedrivePolicy": {
     "deadLetterTargetArn": {
      "Fn::GetAtt": [
       "MediaProcessingDLQ38BEDAF3",
       "Arn"
      ]
     },
     "maxReceiveCount": 3
    },
    "VisibilityTimeout": 900
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingQueue/Resource"
   }
  },
  "MediaProcessingQueuePolicy2D0F0068": {
   "Type": "AWS::SQS::QueuePolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "OriginalMediaBucket322A29F3",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Fn::GetAtt": [
         "MediaProcessingQueue56039BA9",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Queues": [
     {
      "Ref": "MediaProcessingQueue56039BA9"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingQueue/Policy/Resource"
   }
  },
  "MediaMetadataTable190A6CFD": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "mediaId",
      "AttributeType": "S"
     },
     {
      "AttributeName": "processedAt",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "ProcessedAtIndex",
      "KeySchema": [
       {
        "AttributeName": "processedAt",
        "KeyType": "HASH"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "mediaId",
      "KeyType": "HASH"
     }
    ],
    "TableName": "dev-media-metadata"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaMetadataTable/Resource"
   }
  },
  "SharedLayer27DFABF0": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.10"
    ],
    "Content": {
     "S3Bucket": "cdk-hnb659fds-assets-043309357886-us-east-1",
     "S3Key": "4b929399f5e1fcddf0929b3d54aee1a46685c965646b28cdd45cae5c24bb9c98.zip"
    },
    "Description": "Shared dependencies for media processing"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/SharedLayer/Resource",
    "aws:asset:path": "asset.4b929399f5e1fcddf0929b3d54aee1a46685c965646b28cdd45cae5c24bb9c98",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Content"
   }
  },
  "ImageProcessorFunctionServiceRoleBF4C20FC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/ImageProcessorFunction/ServiceRole/Resource"
   }
  },
  "ImageProcessorFunctionServiceRoleDefaultPolicy3F61B55D": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OriginalMediaBucket322A29F3",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OriginalMediaBucket322A29F3",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessedMediaBucket446D3976",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessedMediaBucket446D3976",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MediaMetadataTable190A6CFD",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MediaMetadataTable190A6CFD",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:ChangeMessageVisibility",
        "sqs:DeleteMessage",
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:ReceiveMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MediaProcessingQueue56039BA9",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "ImageProcessorFunctionServiceRoleDefaultPolicy3F61B55D",
    "Roles": [
     {
      "Ref": "ImageProcessorFunctionServiceRoleBF4C20FC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/ImageProcessorFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "ImageProcessorFunction11AF6264": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-043309357886-us-east-1",
     "S3Key": "ce37d2664fb5c1a52c0d68be85b396df94d32440ddb305a8b5ac60224409f0c4.zip"
    },
    "Environment": {
     "Variables": {
      "ENVIRONMENT": "dev",
      "DYNAMODB_TABLE": {
       "Ref": "MediaMetadataTable190A6CFD"
      },
      "PROCESSED_BUCKET": {
       "Ref": "ProcessedMediaBucket446D3976"
      }
     }
    },
    "Handler": "image_processor.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "LoggingConfig": {
     "LogFormat": "JSON"
    },
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "ImageProcessorFunctionServiceRoleBF4C20FC",
      "Arn"
     ]
    },
    "Runtime": "python3.10",
    "Timeout": 900
   },
   "DependsOn": [
    "ImageProcessorFunctionServiceRoleDefaultPolicy3F61B55D",
    "ImageProcessorFunctionServiceRoleBF4C20FC"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/ImageProcessorFunction/Resource",
    "aws:asset:path": "asset.ce37d2664fb5c1a52c0d68be85b396df94d32440ddb305a8b5ac60224409f0c4",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "UploadHandlerFunctionServiceRole483D683C": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/UploadHandlerFunction/ServiceRole/Resource"
   }
  },
  "UploadHandlerFunctionServiceRoleDefaultPolicyBB324832": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:Abort*",
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*",
        "s3:PutObject",
        "s3:PutObjectLegalHold",
        "s3:PutObjectRetention",
        "s3:PutObjectTagging",
        "s3:PutObjectVersionTagging"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "OriginalMediaBucket322A29F3",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "OriginalMediaBucket322A29F3",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "sqs:GetQueueAttributes",
        "sqs:GetQueueUrl",
        "sqs:SendMessage"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "MediaProcessingQueue56039BA9",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:BatchWriteItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DeleteItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:PutItem",
        "dynamodb:Query",
        "dynamodb:Scan",
        "dynamodb:UpdateItem"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MediaMetadataTable190A6CFD",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MediaMetadataTable190A6CFD",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "UploadHandlerFunctionServiceRoleDefaultPolicyBB324832",
    "Roles": [
     {
      "Ref": "UploadHandlerFunctionServiceRole483D683C"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/UploadHandlerFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "UploadHandlerFunction1DEB4309": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-043309357886-us-east-1",
     "S3Key": "035fe7f13e70b1a148977f7f9534f87882faa2e839c830969f387c0bbc5e4801.zip"
    },
    "Environment": {
     "Variables": {
      "ENVIRONMENT": "dev",
      "ORIGINAL_BUCKET": {
       "Ref": "OriginalMediaBucket322A29F3"
      },
      "PROCESSING_QUEUE_URL": {
       "Ref": "MediaProcessingQueue56039BA9"
      },
      "METADATA_TABLE": {
       "Ref": "MediaMetadataTable190A6CFD"
      }
     }
    },
    "Handler": "upload_handler.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "LoggingConfig": {
     "LogFormat": "JSON"
    },
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "UploadHandlerFunctionServiceRole483D683C",
      "Arn"
     ]
    },
    "Runtime": "python3.10",
    "Timeout": 30
   },
   "DependsOn": [
    "UploadHandlerFunctionServiceRoleDefaultPolicyBB324832",
    "UploadHandlerFunctionServiceRole483D683C"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/UploadHandlerFunction/Resource",
    "aws:asset:path": "asset.035fe7f13e70b1a148977f7f9534f87882faa2e839c830969f387c0bbc5e4801",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "StatusHandlerFunctionServiceRole1D3711A3": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/StatusHandlerFunction/ServiceRole/Resource"
   }
  },
  "StatusHandlerFunctionServiceRoleDefaultPolicyE96F8D49": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "dynamodb:BatchGetItem",
        "dynamodb:ConditionCheckItem",
        "dynamodb:DescribeTable",
        "dynamodb:GetItem",
        "dynamodb:GetRecords",
        "dynamodb:GetShardIterator",
        "dynamodb:Query",
        "dynamodb:Scan"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "MediaMetadataTable190A6CFD",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "MediaMetadataTable190A6CFD",
             "Arn"
            ]
           },
           "/index/*"
          ]
         ]
        }
       ]
      },
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Resource": [
        {
         "Fn::GetAtt": [
          "ProcessedMediaBucket446D3976",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "ProcessedMediaBucket446D3976",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "StatusHandlerFunctionServiceRoleDefaultPolicyE96F8D49",
    "Roles": [
     {
      "Ref": "StatusHandlerFunctionServiceRole1D3711A3"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/StatusHandlerFunction/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "StatusHandlerFunction795904D8": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Architectures": [
     "x86_64"
    ],
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-043309357886-us-east-1",
     "S3Key": "035fe7f13e70b1a148977f7f9534f87882faa2e839c830969f387c0bbc5e4801.zip"
    },
    "Environment": {
     "Variables": {
      "ENVIRONMENT": "dev",
      "METADATA_TABLE": {
       "Ref": "MediaMetadataTable190A6CFD"
      },
      "PROCESSED_BUCKET": {
       "Ref": "ProcessedMediaBucket446D3976"
      }
     }
    },
    "Handler": "status_handler.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "LoggingConfig": {
     "LogFormat": "JSON"
    },
    "MemorySize": 256,
    "Role": {
     "Fn::GetAtt": [
      "StatusHandlerFunctionServiceRole1D3711A3",
      "Arn"
     ]
    },
    "Runtime": "python3.10",
    "Timeout": 30
   },
   "DependsOn": [
    "StatusHandlerFunctionServiceRoleDefaultPolicyE96F8D49",
    "StatusHandlerFunctionServiceRole1D3711A3"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/StatusHandlerFunction/Resource",
    "aws:asset:path": "asset.035fe7f13e70b1a148977f7f9534f87882faa2e839c830969f387c0bbc5e4801",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Code"
   }
  },
  "MediaProcessingApi0A9A6701": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "ApiKeySourceType": "HEADER",
    "Description": "API for media processing pipeline",
    "Name": "dev-media-processing-api"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Resource"
   }
  },
  "MediaProcessingApiDeployment45551F98dbf14a7de685be1fe3022347e9d65ebf": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "API for media processing pipeline",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "DependsOn": [
    "MediaProcessingApimediamediaId2A708D1A",
    "MediaProcessingApimediamediaIdstatusGET5DCC9B39",
    "MediaProcessingApimediamediaIdstatusOPTIONS7B144D01",
    "MediaProcessingApimediamediaIdstatusBBADA4E7",
    "MediaProcessingApimediaOPTIONS28A0275F",
    "MediaProcessingApimedia6C6E7F08",
    "MediaProcessingApimediauploadOPTIONS7084429D",
    "MediaProcessingApimediauploadPOSTDEDED5BF",
    "MediaProcessingApimediaupload7BD2FE45",
    "RequestValidatorB6FDBF18",
    "StatusModel9A2AB4BA",
    "UploadModelAE3998CE"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Deployment/Resource"
   }
  },
  "MediaProcessingApiDeploymentStageprod81E9BDF6": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "MediaProcessingApiDeployment45551F98dbf14a7de685be1fe3022347e9d65ebf"
    },
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/DeploymentStage.prod/Resource"
   }
  },
  "MediaProcessingApimedia6C6E7F08": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "MediaProcessingApi0A9A6701",
      "RootResourceId"
     ]
    },
    "PathPart": "media",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/Resource"
   }
  },
  "MediaProcessingApimediaupload7BD2FE45": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "MediaProcessingApimedia6C6E7F08"
    },
    "PathPart": "upload",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/upload/Resource"
   }
  },
  "MediaProcessingApimediauploadPOSTApiPermissionMediaProcessingStackMediaProcessingApi7CA1B650POSTmediauploadBA1359C7": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UploadHandlerFunction1DEB4309",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:043309357886:",
       {
        "Ref": "MediaProcessingApi0A9A6701"
       },
       "/",
       {
        "Ref": "MediaProcessingApiDeploymentStageprod81E9BDF6"
       },
       "/POST/media/upload"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/upload/POST/ApiPermission.MediaProcessingStackMediaProcessingApi7CA1B650.POST..media.upload"
   }
  },
  "MediaProcessingApimediauploadPOSTApiPermissionTestMediaProcessingStackMediaProcessingApi7CA1B650POSTmediauploadE627E82D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UploadHandlerFunction1DEB4309",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:043309357886:",
       {
        "Ref": "MediaProcessingApi0A9A6701"
       },
       "/test-invoke-stage/POST/media/upload"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/upload/POST/ApiPermission.Test.MediaProcessingStackMediaProcessingApi7CA1B650.POST..media.upload"
   }
  },
  "MediaProcessingApimediauploadPOSTDEDED5BF": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "StatusCode": "200"
      }
     ],
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "UploadHandlerFunction1DEB4309",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": {
        "Ref": "StatusModel9A2AB4BA"
       }
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "RequestModels": {
     "application/json": {
      "Ref": "UploadModelAE3998CE"
     }
    },
    "RequestValidatorId": {
     "Ref": "RequestValidatorB6FDBF18"
    },
    "ResourceId": {
     "Ref": "MediaProcessingApimediaupload7BD2FE45"
    },
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/upload/POST/Resource"
   }
  },
  "MediaProcessingApimediauploadOPTIONS7084429D": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "MediaProcessingApimediaupload7BD2FE45"
    },
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/upload/OPTIONS/Resource"
   }
  },
  "MediaProcessingApimediamediaId2A708D1A": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "MediaProcessingApimedia6C6E7F08"
    },
    "PathPart": "{mediaId}",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/{mediaId}/Resource"
   }
  },
  "MediaProcessingApimediamediaIdstatusBBADA4E7": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "MediaProcessingApimediamediaId2A708D1A"
    },
    "PathPart": "status",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/{mediaId}/status/Resource"
   }
  },
  "MediaProcessingApimediamediaIdstatusGETApiPermissionMediaProcessingStackMediaProcessingApi7CA1B650GETmediamediaIdstatus597FBB10": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "StatusHandlerFunction795904D8",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:043309357886:",
       {
        "Ref": "MediaProcessingApi0A9A6701"
       },
       "/",
       {
        "Ref": "MediaProcessingApiDeploymentStageprod81E9BDF6"
       },
       "/GET/media/*/status"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/{mediaId}/status/GET/ApiPermission.MediaProcessingStackMediaProcessingApi7CA1B650.GET..media.{mediaId}.status"
   }
  },
  "MediaProcessingApimediamediaIdstatusGETApiPermissionTestMediaProcessingStackMediaProcessingApi7CA1B650GETmediamediaIdstatusBDF9190B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "StatusHandlerFunction795904D8",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:043309357886:",
       {
        "Ref": "MediaProcessingApi0A9A6701"
       },
       "/test-invoke-stage/GET/media/*/status"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/{mediaId}/status/GET/ApiPermission.Test.MediaProcessingStackMediaProcessingApi7CA1B650.GET..media.{mediaId}.status"
   }
  },
  "MediaProcessingApimediamediaIdstatusGET5DCC9B39": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": true,
    "AuthorizationType": "NONE",
    "HttpMethod": "GET",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Origin": "'*'"
       },
       "StatusCode": "200"
      }
     ],
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "StatusHandlerFunction795904D8",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "MethodResponses": [
     {
      "ResponseModels": {
       "application/json": {
        "Ref": "StatusModel9A2AB4BA"
       }
      },
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Origin": true
      },
      "StatusCode": "200"
     }
    ],
    "RequestValidatorId": {
     "Ref": "RequestValidatorB6FDBF18"
    },
    "ResourceId": {
     "Ref": "MediaProcessingApimediamediaIdstatusBBADA4E7"
    },
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/{mediaId}/status/GET/Resource"
   }
  },
  "MediaProcessingApimediamediaIdstatusOPTIONS7B144D01": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "MediaProcessingApimediamediaIdstatusBBADA4E7"
    },
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/{mediaId}/status/OPTIONS/Resource"
   }
  },
  "MediaProcessingApimediaOPTIONS28A0275F": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'*'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'GET,POST,PUT,DELETE'",
        "method.response.header.Access-Control-Max-Age": "'86400'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true,
       "method.response.header.Access-Control-Max-Age": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "MediaProcessingApimedia6C6E7F08"
    },
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApi/Default/media/OPTIONS/Resource"
   }
  },
  "RequestValidatorB6FDBF18": {
   "Type": "AWS::ApiGateway::RequestValidator",
   "Properties": {
    "Name": "RequestValidator",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    },
    "ValidateRequestBody": true,
    "ValidateRequestParameters": true
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/RequestValidator/Resource"
   }
  },
  "UploadModelAE3998CE": {
   "Type": "AWS::ApiGateway::Model",
   "Properties": {
    "ContentType": "application/json",
    "Name": "UploadRequest",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    },
    "Schema": {
     "properties": {
      "fileName": {
       "maxLength": 255,
       "minLength": 1,
       "type": "string"
      },
      "contentType": {
       "enum": [
        "image/jpeg",
        "image/png",
        "image/gif"
       ],
       "type": "string"
      }
     },
     "required": [
      "fileName",
      "contentType"
     ],
     "type": "object",
     "$schema": "http://json-schema.org/draft-04/schema#"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/UploadModel/Resource"
   }
  },
  "StatusModel9A2AB4BA": {
   "Type": "AWS::ApiGateway::Model",
   "Properties": {
    "ContentType": "application/json",
    "Name": "StatusResponse",
    "RestApiId": {
     "Ref": "MediaProcessingApi0A9A6701"
    },
    "Schema": {
     "properties": {
      "status": {
       "enum": [
        "PENDING",
        "PROCESSING",
        "COMPLETED",
        "FAILED"
       ],
       "type": "string"
      },
      "mediaId": {
       "type": "string"
      },
      "processedUrl": {
       "type": "string"
      },
      "error": {
       "type": "string"
      }
     },
     "required": [
      "status",
      "mediaId"
     ],
     "type": "object",
     "$schema": "http://json-schema.org/draft-04/schema#"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/StatusModel/Resource"
   }
  },
  "MediaProcessingApiKey238D7D25": {
   "Type": "AWS::ApiGateway::ApiKey",
   "Properties": {
    "Description": "API Key for media processing access",
    "Enabled": true,
    "Name": "MediaProcessingKey",
    "Value": "4M6vpzYRc2YGUl1kN2MWVrupwypB0g6o0Kknz2Due-o"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingApiKey/Resource"
   }
  },
  "UsagePlanC18B28F1": {
   "Type": "AWS::ApiGateway::UsagePlan",
   "Properties": {
    "ApiStages": [
     {
      "ApiId": {
       "Ref": "MediaProcessingApi0A9A6701"
      },
      "Stage": {
       "Ref": "MediaProcessingApiDeploymentStageprod81E9BDF6"
      },
      "Throttle": {}
     }
    ],
    "Quota": {
     "Limit": 10000,
     "Period": "DAY"
    },
    "Throttle": {
     "BurstLimit": 200,
     "RateLimit": 100
    },
    "UsagePlanName": "dev-media-processing-usage-plan"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/UsagePlan/Resource"
   }
  },
  "UsagePlanUsagePlanKeyResourceMediaProcessingStackMediaProcessingApiKeyBAD60EE83ED50290": {
   "Type": "AWS::ApiGateway::UsagePlanKey",
   "Properties": {
    "KeyId": {
     "Ref": "MediaProcessingApiKey238D7D25"
    },
    "KeyType": "API_KEY",
    "UsagePlanId": {
     "Ref": "UsagePlanC18B28F1"
    }
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/UsagePlan/UsagePlanKeyResource:MediaProcessingStackMediaProcessingApiKeyBAD60EE8"
   }
  },
  "LambdaErrorRateAlarm35685FAA": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmActions": [
     {
      "Ref": "MediaProcessingAlarms02E7EA9C"
     }
    ],
    "AlarmDescription": "Alarm when Lambda function has errors",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "FunctionName",
      "Value": {
       "Ref": "ImageProcessorFunction11AF6264"
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "Errors",
    "Namespace": "AWS/Lambda",
    "Period": 300,
    "Statistic": "Sum",
    "Threshold": 1
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/LambdaErrorRateAlarm/Resource"
   }
  },
  "QueueAgeAlarmC3F61350": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmActions": [
     {
      "Ref": "MediaProcessingAlarms02E7EA9C"
     }
    ],
    "AlarmDescription": "Alarm when messages are stuck in queue",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "QueueName",
      "Value": {
       "Fn::GetAtt": [
        "MediaProcessingQueue56039BA9",
        "QueueName"
       ]
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ApproximateAgeOfOldestMessage",
    "Namespace": "AWS/SQS",
    "Period": 300,
    "Statistic": "Maximum",
    "Threshold": 300
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/QueueAgeAlarm/Resource"
   }
  },
  "DLQMessageCountAlarm53C9BD22": {
   "Type": "AWS::CloudWatch::Alarm",
   "Properties": {
    "AlarmActions": [
     {
      "Ref": "MediaProcessingAlarms02E7EA9C"
     }
    ],
    "AlarmDescription": "Alarm when messages are sent to DLQ",
    "ComparisonOperator": "GreaterThanOrEqualToThreshold",
    "Dimensions": [
     {
      "Name": "QueueName",
      "Value": {
       "Fn::GetAtt": [
        "MediaProcessingDLQ38BEDAF3",
        "QueueName"
       ]
      }
     }
    ],
    "EvaluationPeriods": 1,
    "MetricName": "ApproximateNumberOfMessagesVisible",
    "Namespace": "AWS/SQS",
    "Period": 300,
    "Statistic": "Sum",
    "Threshold": 0
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/DLQMessageCountAlarm/Resource"
   }
  },
  "MediaProcessingDashboard27393888": {
   "Type": "AWS::CloudWatch::Dashboard",
   "Properties": {
    "DashboardBody": {
     "Fn::Join": [
      "",
      [
       "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":1,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"# Media Processing Pipeline Overview\"}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":0,\"y\":1,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Lambda Function Metrics\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"AWS/Lambda\",\"Invocations\",\"FunctionName\",\"",
       {
        "Ref": "ImageProcessorFunction11AF6264"
       },
       "\",{\"stat\":\"Sum\"}],[\"AWS/Lambda\",\"Errors\",\"FunctionName\",\"",
       {
        "Ref": "ImageProcessorFunction11AF6264"
       },
       "\",{\"stat\":\"Sum\"}]],\"yAxis\":{}}},{\"type\":\"metric\",\"width\":12,\"height\":6,\"x\":12,\"y\":1,\"properties\":{\"view\":\"timeSeries\",\"title\":\"SQS Queue Metrics\",\"region\":\"",
       {
        "Ref": "AWS::Region"
       },
       "\",\"metrics\":[[\"AWS/SQS\",\"ApproximateNumberOfMessagesVisible\",\"QueueName\",\"",
       {
        "Fn::GetAtt": [
         "MediaProcessingQueue56039BA9",
         "QueueName"
        ]
       },
       "\",{\"stat\":\"Sum\"}],[\"AWS/SQS\",\"ApproximateAgeOfOldestMessage\",\"QueueName\",\"",
       {
        "Fn::GetAtt": [
         "MediaProcessingQueue56039BA9",
         "QueueName"
        ]
       },
       "\",{\"stat\":\"Maximum\"}]],\"yAxis\":{}}},{\"type\":\"alarm\",\"width\":24,\"height\":3,\"x\":0,\"y\":7,\"properties\":{\"title\":\"Alarms\",\"alarms\":[\"",
       {
        "Fn::GetAtt": [
         "LambdaErrorRateAlarm35685FAA",
         "Arn"
        ]
       },
       "\",\"",
       {
        "Fn::GetAtt": [
         "QueueAgeAlarmC3F61350",
         "Arn"
        ]
       },
       "\",\"",
       {
        "Fn::GetAtt": [
         "DLQMessageCountAlarm53C9BD22",
         "Arn"
        ]
       },
       "\"]}}]}"
      ]
     ]
    },
    "DashboardName": "dev-media-processing-dashboard"
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/MediaProcessingDashboard/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/22S207kMAyGn2Xu09CBF9gBxA2LtlsOt8htvNPspEmJE0ZVlHdHOcAA4qb+fsd2bKfn/Lxtedhu4EjNKA6NkgMP9w7GA4MjPQfSxMODWeTIrv7pDJHRBQ+XfjygS85KxXRGyXE9uasu4hIII6MX4uGvR48prED+nnI/ycjEqmE2YuDhAQaVkzJEpmAeBPDwG1a0T2hJGp2Ov+sbr0dXuUM7S0onaY5nIEJHfJcMkzDz0JtyR7anlt67gUXuweERVh56JLdbZI6ueI2LMuuMOq/mk7p3sM91C/RIxtsR00o+RC1U+A7dZERyVerxxSO5J1BSgDO2RH/z3RmBKidl2C3yFnP/lR4J9tgpyLv4WdziGtmojBdHcOPEw06BnXONDNdA02DA5t4+RIzsypMz84/DfD3qrHmVAm0ePq8+LUXq/ZdN/PFu8S6ybQNqmYC3m1/1Lz1Ltjx+s6xuMrqGdFm8P3dkRZ9d8G3L281/krKxXjs5I++LfQPc9lO9AQMAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "MediaProcessingStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "MediaProcessingApiEndpointCC7BB9EC": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "MediaProcessingApi0A9A6701"
      },
      ".execute-api.us-east-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "MediaProcessingApiDeploymentStageprod81E9BDF6"
      },
      "/"
     ]
    ]
   }
  },
  "OriginalBucketName": {
   "Description": "Name of the original media bucket",
   "Value": {
    "Ref": "OriginalMediaBucket322A29F3"
   }
  },
  "ProcessedBucketName": {
   "Description": "Name of the processed media bucket",
   "Value": {
    "Ref": "ProcessedMediaBucket446D3976"
   }
  },
  "ProcessingQueueURL": {
   "Description": "URL of the media processing queue",
   "Value": {
    "Ref": "MediaProcessingQueue56039BA9"
   }
  },
  "MetadataTableName": {
   "Description": "Name of the media metadata table",
   "Value": {
    "Ref": "MediaMetadataTable190A6CFD"
   }
  },
  "ApiEndpoint": {
   "Description": "API Gateway endpoint URL",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "MediaProcessingApi0A9A6701"
      },
      ".execute-api.us-east-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "MediaProcessingApiDeploymentStageprod81E9BDF6"
      },
      "/"
     ]
    ]
   }
  },
  "DashboardURL": {
   "Description": "CloudWatch Dashboard URL",
   "Value": "https://us-east-1.console.aws.amazon.com/cloudwatch/home?region=us-east-1#dashboards:name=dev-media-processing-dashboard"
  },
  "ApiKeyValue": {
   "Description": "API Key Value for authentication",
   "Value": "4M6vpzYRc2YGUl1kN2MWVrupwypB0g6o0Kknz2Due-o"
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}