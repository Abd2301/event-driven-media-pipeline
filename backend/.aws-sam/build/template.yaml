AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless SaaS application backend
Globals:
  Function:
    Timeout: 30
    MemorySize: 256
    Runtime: python3.10
    Environment:
      Variables:
        USERS_TABLE:
          Ref: UsersTable
        TENANTS_TABLE:
          Ref: TenantsTable
        JWT_SECRET:
          Ref: JwtSecret
Parameters:
  JwtSecret:
    Type: String
    Description: Secret key for JWT token generation
    Default: e5298f548bab9996676025a645c62550487694a85584db92b4d087652cd27e75
Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MyServerlessSaaSApi
      StageName: Prod
      Cors:
        AllowMethods: '''OPTIONS,GET,POST,PUT,DELETE'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
        AllowOrigin: '''*'''
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: email
        AttributeType: S
      - AttributeName: tenantId
        AttributeType: S
      KeySchema:
      - AttributeName: email
        KeyType: HASH
      GlobalSecondaryIndexes:
      - IndexName: TenantIdIndex
        KeySchema:
        - AttributeName: tenantId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-tenants
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: tenantId
        AttributeType: S
      KeySchema:
      - AttributeName: tenantId
        KeyType: HASH
  AuthHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AuthHandlerFunction
      Handler: auth.lambda_handler
      Events:
        Login:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
            RestApiId:
              Ref: MyApi
    Metadata:
      SamResourceId: AuthHandlerFunction
  TenantSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: TenantSignupFunction
      Handler: tenant_signup.lambda_handler
      Events:
        Signup:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
            RestApiId:
              Ref: MyApi
    Metadata:
      SamResourceId: TenantSignupFunction
  GetUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: GetUserDataFunction
      Handler: get_user_data.lambda_handler
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /user
            Method: get
            RestApiId:
              Ref: MyApi
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
    Metadata:
      SamResourceId: GetUserDataFunction
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${MyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
  UsersTableName:
    Description: Name of the Users table
    Value:
      Ref: UsersTable
  TenantsTableName:
    Description: Name of the Tenants table
    Value:
      Ref: TenantsTable
